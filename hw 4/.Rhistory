set.seed(123)
Boost_boot = boot(Boost_test_set, boot_all_metrics, R = 10000)
boot_accuracy(boostdf, 1:355)
boostdf = data.frame(labels = Combined_TM.test$BinarySc, predictions = PredictCVBoost < 0.5)
boot_accuracy(boostdf, 1:355)
size(boostdf)
desc(boostdf)
str(boostdf)
boot_accuracy(boostdf, 1:2240)
boot_tpr(lda_df, 1:2240)
boot_fpr(lda_df, 1:2240)
boot_tpr(boostdf, 1:2240)
boostdf = data.frame(labels = Combined_TM.test$BinarySc, predictions = PredictCVBoost < 0.5)
boot_accuracy(boostdf, 1:2240)
boot_tpr(boostdf, 1:2240)
boot_fpr(boostdf, 1:2240)
boot_all_metrics(boostdf, 1:355)
boot_tpr(boostdf, 1:2240)
tableTPR <- function(label, pred) {
t = table(label, pred)
return(t[2,2]/(t[2,1] + t[2,2]))
}
tableFPR <- function(label, pred) {
t = table(label, pred)
return(t[1,2]/(t[1,1] + t[1,2]))
}
boot_tpr(boostdf, 1:2240)
boot_fpr(boostdf, 1:2240)
boot_all_metrics(boostdf, 1:355)
Boost_test_set = data.frame(response = Combined_TM.test$BinarySc, predictions = PredictCVBoost < 0.5)
set.seed(123)
Boost_boot = boot(Boost_test_set, boot_all_metrics, R = 10000)
boot_all_metrics(boostdf, 1:2240)
tableAccuracy <- function(test, pred) {
str(test)
str(pred)
t = table(test, pred)
a = sum(diag(t))/length(test)
return(a)
}
boot_all_metrics(boostdf, 1:2240)
Boost_boot = boot(Boost_test_set, boot_all_metrics, R = 10000)
Boost_boot = boot(Boost_test_set, boot_all_metrics, R = 10000)
Boost_boot = boot(Boost_test_set, boot_all_metrics, R = 10000)
boot_accuracy <- function(data, index) {
labels <- data$response[index]
predictions <- data$prediction[index]
return(tableAccuracy(labels, predictions))
}
boot_tpr <- function(data, index) {
labels <- data$response[index]
predictions <- data$prediction[index]
return(tableTPR(labels, predictions))
}
boot_fpr <- function(data, index) {
labels <- data$response[index]
predictions <- data$prediction[index]
return(tableFPR(labels, predictions))
}
Boost_boot = boot(Boost_test_set, boot_all_metrics, R = 10000)
Boost_boot
boot.ci(Boost_boot, index = 1, type = "basic")
boot.ci(Boost_boot, index = 2, type = "basic")
boot.ci(Boost_boot, index = 3, type = "basic")
tableAccuracy <- function(test, pred) {
t = table(test, pred)
a = sum(diag(t))/length(test)
return(a)
}
tableTPR <- function(label, pred) {
t = table(label, pred)
return(t[2,2]/(t[2,1] + t[2,2]))
}
tableFPR <- function(label, pred) {
t = table(label, pred)
return(t[1,2]/(t[1,1] + t[1,2]))
}
boot_accuracy <- function(data, index) {
labels <- data$response[index]
predictions <- data$prediction[index]
return(tableAccuracy(labels, predictions))
}
boot_tpr <- function(data, index) {
labels <- data$response[index]
predictions <- data$prediction[index]
return(tableTPR(labels, predictions))
}
boot_fpr <- function(data, index) {
labels <- data$response[index]
predictions <- data$prediction[index]
return(tableFPR(labels, predictions))
}
boot_all_metrics <- function(data, index) {
acc = boot_accuracy(data, index)
tpr = boot_tpr(data, index)
fpr = boot_fpr(data, index)
return(c(acc, tpr, fpr))
}
Boost_boot
boot.ci(Boost_boot, index = 1, type = "basic")
boot.ci(Boost_boot, index = 2, type = "basic")
boot.ci(Boost_boot, index = 3, type = "basic")
library(ROCR)
library(GGally)
?performance
CVboostperf <- performance(PredictCVBoost, measure = "tpr", x.measure = "fpr")
CVboostperf <- performance(PredictCVBoost, measure = "tpr")
PredictCVBoost
CVboostperf <- performance(PredictCVBoost<0.5, measure = "tpr")
CVboostperf <- performance(PredictCVBoost, measure = "tpr")
CVboostperf <- performance(PredictRF, measure = "tpr")
# Calculating the performance of the model using precision
CVboostpred <- prediction(final_CVboost, newdata = Combined_TM.test.mm, n.trees = 650, type = "response")
# Calculating the performance of the model using precision
CVboostpred <- prediction(final_CVboost, newdata = Combined_TM.test.mm)
# Calculating the performance of the model using precision
CVboostpred <- prediction(final_CVboost, Combined_TM.test.mm)
# Calculating the performance of the model using precision
CVboostpred <- prediction(final_CVboost)
# Calculating the performance of the model using precision
CVboostpred <- prediction(final_CVboost, Combined_TM.test$BinarySc)
pred <- prediction(PredictCVBoost, Combined_TM.test$BinarySc)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col=rainbow(10))
?prediction
View(pred)
?performance
perf <- performance(predCVBoosT, measure = "prec")
predCVBoosT <- prediction(PredictCVBoost, Combined_TM.test$BinarySc)
perf <- performance(predCVBoosT, measure = "prec")
precision_CVBoost <- perf@y.values[[1]]
plot(perf, col=rainbow(10))
precision_CVBoost
precision_CVBoost <- perf@y.values[[1]]
plot(perf, col=rainbow(10))
cutoffs <- data.frame(cut=perf@alpha.values[[1]], prec=perf@y.values[[1]])
cutoffs <- data.frame(cut=perf@alpha.values[[1]], prec=perf@y.values[[1]])
cutoffs <- data.frame(cut=perf@alpha.values[1], prec=perf@y.values[[1]])
cutoffs <- data.frame(cut=perf@alpha.values[1], prec=perf@y.values[1])
cutoffs <- data.frame(cut=perf@alpha.values[[1]], prec=perf@y.values[1])
str(perf)
cutoffs <- data.frame(cut=perf@x.values[1], prec=perf@y.values[1])
cutoffs
str(cutoffs)
str(perf)
perf <- performance(predCVBoosT, measure = "prec", x.measure = "fpr")
str(perf)
cutoffs <- data.frame(cut=perf@alpha.values[1], prec=perf@y.values[1])
str(cutoffs)
plot(perf, col=rainbow(10))
plot(perf, col=rainbow(10))
cutoffs <- data.frame(cut=perf@alpha.values, prec=perf@y.values)
str(cutoffs)
as.numeric(performance(predCVBoosT, "prec")@y.values)
as.numeric(performance(predCVBoosT, "prec")@y.values[1])
as.numeric(performance(predCVBoosT, "prec")@y.values)
as.numeric(performance(predCVBoosT, "fpr")@y.values)
as.numeric(performance(predCVBoosT, "prec")@y.values)
CVboostpred <- prediction(final_CVboost, Combined_TM.test$BinarySc)
CVboostpred <- prediction(mod_CVboost2, Combined_TM.test$BinarySc)
CVboostpred <- prediction(final_CVboost, Combined_TM.test$BinarySc)
CVboostpred <- prediction(final_CVboost, Combined_TM.test$BinarySc)
CVboostpred <- prediction(PredictCVBoost, Combined_TM.test$BinarySc)
CVBoostPerf <- performance(CVboostpred, "tpr", "fpr")
plot(CVBoostPerf, colorize = TRUE)
abline(0, 1)
as.numeric(performance(CVboostpred, "auc")@y.values)
CVboostpred <- prediction( Combined_TM.test$BinarySc, PredictCVBoost)
CVboostpred <- prediction(PredictCVBoost, Combined_TM.test$BinarySc,)
CVBoostPerf <- performance(CVboostpred, "tpr", "fpr")
plot(CVBoostPerf, colorize = TRUE)
abline(0, 1)
CVBoostPerf <- performance(CVboostpred, "fpr", "tpr")
plot(CVBoostPerf, colorize = TRUE)
abline(0, 1)
as.numeric(performance(CVboostpred, "auc")@y.values)
CVBoostPerf <- performance(CVboostpred, "tpr", "fpr")
plot(CVBoostPerf, colorize = TRUE)
abline(0, 1)
as.numeric(performance(CVboostpred, "auc")@y.values)
CVBoostPerf <- performance(CVboostpred, "prec", "fpr")
plot(CVBoostPerf, colorize = TRUE)
abline(0, 1)
CVBoostPerf <- performance(CVboostpred, "prec", "fpr")
plot(CVBoostPerf, colorize = TRUE)
as.numeric(performance(CVboostpred, "auc")@y.values)
CVBoostPerf <- performance(CVboostpred, "prec")
plot(CVBoostPerf, colorize = TRUE)
as.numeric(performance(CVboostpred, "auc")@y.values)
plot(CVBoostPerf, colorize = TRUE)
CVBoostPerf <- performance(CVboostpred, "fpr")
plot(CVBoostPerf, colorize = TRUE)
plot(CVBoostPerf, colorize = FALSE)
CVBoostPerf <- performance(CVboostpred, "prec")
plot(CVBoostPerf, colorize = FALSE)
# For the Logistic Regression Model
logisticpred <- prediction(PredictLog, Combined_TM.test$BinarySc,)
logisticPerf <- performance(logisticpred, "prec")
plot(logisticPerf, colorize = FALSE)
as.numeric(performance(logisticpred, "prec")@y.values)
as.numeric(performance(logisticpred, "auc")@y.values)
as.numeric(performance(CVboostpred, "auc")@y.values)
# For the Cross Validated Random Forests Model
CVRFpred <- prediction(Predict_CVRF, Combined_TM.test$BinarySc,)
# For the Cross Validated Random Forests Model
CVRFpred <- prediction(Predict_CVRF, Combined_TM.test$BinarySc,)
str(Predict_CVRF)
str(PredictLog)
# For the Stepwise Logistic Regression Model
Steplogpred <- prediction(PredictStepLog, Combined_TM.test$BinarySc)
SteplogPerf <- performance(Steplogpred, "prec")
plot(SteplogPerf, colorize = FALSE)
# For the Cross Validated Boosting MOdel
CVboostpred <- prediction(PredictCVBoost, Combined_TM.train$BinarySc,)
CVBoostPerf <- performance(CVboostpred, "prec")
plot(CVBoostPerf, colorize = FALSE)
# For the Logistic Regression Model
logisticpred <- prediction(PredictLog, Combined_TM.train$BinarySc,)
logisticPerf <- performance(logisticpred, "prec")
plot(logisticPerf, colorize = FALSE)
as.numeric(performance(logisticpred, "auc")@y.values)
# For the Stepwise Logistic Regression Model
Steplogpred <- prediction(PredictStepLog, Combined_TM.train$BinarySc)
# For the Cross Validated Boosting MOdel
CVboostpred <- prediction(PredictCVBoost, Combined_TM.train$BinarySc,)
CVBoostPerf <- performance(CVboostpred, "prec")
plot(CVBoostPerf, colorize = FALSE)
as.numeric(performance(CVboostpred, "auc")@y.values)
# For the Logistic Regression Model
logisticpred <- prediction(PredictLog, Combined_TM.train$BinarySc,)
logisticPerf <- performance(logisticpred, "prec")
plot(logisticPerf, colorize = FALSE)
as.numeric(performance(logisticpred, "auc")@y.values)
# For the Stepwise Logistic Regression Model
Steplogpred <- prediction(PredictStepLog, Combined_TM.train$BinarySc)
SteplogPerf <- performance(Steplogpred, "prec")
plot(SteplogPerf, colorize = FALSE)
as.numeric(performance(Steplogpred, "auc")@y.values)
spltest = sample.split(Combined_TM.test$BinarySc, SplitRatio = 0.7)
spltest = sample.split(Combined_TM.test$BinarySc, SplitRatio = 0.5)
Combined_TM.test <- filter(Combined_TM, spltest == TRUE)
Combined_TM.test <- filter(Combined_TM, spltest == TRUE)
Combined_TM.finaltest <- filter(Combined_TM, spltest == FALSE)
Combined_TM.train <- filter(Combined_TM, spl == TRUE)
Combined_TM.test <- filter(Combined_TM, spl == FALSE)
spltest = sample.split(Combined_TM.test$BinarySc, SplitRatio = 0.5)
Combined_TM.test <- filter(Combined_TM, spltest == TRUE)
Combined_TM.finaltest <- filter(Combined_TM, spltest == FALSE)
Combined_TM.test2 <- filter(Combined_TM, spltest == TRUE)
Combined_TM.train <- filter(Combined_TM, spl == TRUE)
Combined_TM.test <- filter(Combined_TM, spl == FALSE)
spltest = sample.split(Combined_TM.test$BinarySc, SplitRatio = 0.5)
Combined_TM.test2 <- filter(Combined_TM.test, spltest == TRUE)
Combined_TM.finaltest <- filter(Combined_TM.test, spltest == FALSE)
PredictLog = predict(mod_glm, newdata = Combined_TM.test2, type = "response")
table(Combined_TM.test$BinarySc, PredictLog > 0.5)
table(Combined_TM.test2$BinarySc, PredictLog > 0.5)
#   FALSE TRUE
# 0   750  387
# 1   550  553
tableAccuracy(Combined_TM.test2$BinarySc, PredictLog > 0.5)
PredictLDA = predict(mod_lda, newdata = Combined_TM.test2)$class
table(Combined_TM.test2$BinarySc, PredictLDA)
#     0   1
# 0 753 384
# 1 551 552
tableAccuracy(Combined_TM.test2$BinarySc, PredictLDA)
Predict_CVRF = predict(final_CVrf, newdata = Combined_TM.test2)
table(Combined_TM.test2$BinarySc, Predict_CVRF)
#     0   1
# 0 822 315
# 1 644 459
tableAccuracy(Combined_TM.test2$BinarySc, Predict_CVRF)
as.data.frame(final_CVrf$importance) %>%
mutate(Words = rownames(final_CVrf$importance)) %>%
arrange(desc(MeanDecreaseGini))
PredictStepLog = predict(mod_StepLog, newdata = Combined_TM.test2, type = "response")
table(Combined_TM.test2$BinarySc, PredictStepLog > 0.5)
# FALSE TRUE
# 0   749  388
# 1   561  542
tableAccuracy(Combined_TM.test2$BinarySc, PredictStepLog > 0.5)
PredictBoost = predict(mod_boost, newdata = Combined_TM.test2)
PredictBoost = predict(mod_boost, newdata = Combined_TM.test)
table(Combined_TM.test$BinarySc, PredictBoost)
# FALSE TRUE
# 0   749  388
# 1   561  542
tableAccuracy(Combined_TM.test$BinarySc, PredictStepLog > 0.5)
PredictStepLog = predict(mod_StepLog, newdata = Combined_TM.test, type = "response")
table(Combined_TM.test$BinarySc, PredictStepLog > 0.5)
# FALSE TRUE
# 0   749  388
# 1   561  542
tableAccuracy(Combined_TM.test$BinarySc, PredictStepLog > 0.5)
Predict_CVRF = predict(final_CVrf, newdata = Combined_TM.test)
table(Combined_TM.test$BinarySc, Predict_CVRF)
Predict_CVRF = predict(final_CVrf, newdata = Combined_TM.test)
table(Combined_TM.test$BinarySc, Predict_CVRF)
Predict_CVRF = predict(final_CVrf, newdata = Combined_TM.test)
table(Combined_TM.test$BinarySc, Predict_CVRF)
#     0   1
# 0 822 315
# 1 644 459
tableAccuracy(Combined_TM.test$BinarySc, Predict_CVRF)
PredictLDA = predict(mod_lda, newdata = Combined_TM.test)$class
table(Combined_TM.test$BinarySc, PredictLDA)
#     0   1
# 0 753 384
# 1 551 552
tableAccuracy(Combined_TM.test$BinarySc, PredictLDA)
PredictLog = predict(mod_glm, newdata = Combined_TM.test, type = "response")
table(Combined_TM.test$BinarySc, PredictLog > 0.5)
#   FALSE TRUE
# 0   750  387
# 1   550  553
tableAccuracy(Combined_TM.test$BinarySc, PredictLog > 0.5)
table(Combined_TM.test$BinarySc, Predict_CVRF)
#     0   1
# 0 822 315
# 1 644 459
tableAccuracy(Combined_TM.test$BinarySc, Predict_CVRF)
table(Combined_TM.test$BinarySc, Predict_CVRF)
table(Combined_TM.test$BinarySc, Predict_CVRF)
table(Combined_TM.test$BinarySc, Predict_CVRF)
Predict_CVRF = predict(final_CVrf, newdata = Combined_TM.test)
table(Combined_TM.test$BinarySc, Predict_CVRF)
Predict_CVRF = predict(final_CVrf, newdata = Combined_TM.test)
table(Combined_TM.test$BinarySc, Predict_CVRF)
# For the Cross Validated Boosting MOdel
CVboostpred <- prediction(PredictCVBoost, Combined_TM.test$BinarySc)
CVBoostPerf <- performance(CVboostpred, "prec")
plot(CVBoostPerf, colorize = FALSE)
# For the Logistic Regression Model
logisticpred <- prediction(PredictLog, Combined_TM.test$BinarySc)
logisticPerf <- performance(logisticpred, "prec")
plot(logisticPerf, colorize = FALSE)
# For the Stepwise Logistic Regression Model
Steplogpred <- prediction(PredictStepLog, Combined_TM.train$BinarySc)
SteplogPerf <- performance(Steplogpred, "prec")
plot(SteplogPerf, colorize = FALSE)
# For the Stepwise Logistic Regression Model
Steplogpred <- prediction(PredictStepLog, Combined_TM.train$BinarySc)
PredictStepLog = predict(mod_StepLog, newdata = Combined_TM.test, type = "response")
table(Combined_TM.test$BinarySc, PredictStepLog > 0.5)
# FALSE TRUE
# 0   749  388
# 1   561  542
tableAccuracy(Combined_TM.test$BinarySc, PredictStepLog > 0.5)
# For the Stepwise Logistic Regression Model
Steplogpred <- prediction(PredictStepLog, Combined_TM.train$BinarySc)
SteplogPerf <- performance(Steplogpred, "prec")
plot(SteplogPerf, colorize = FALSE)
as.numeric(performance(Steplogpred, "auc")@y.values)
# For the Stepwise Logistic Regression Model
Steplogpred <- prediction(PredictStepLog, Combined_TM.test$BinarySc)
SteplogPerf <- performance(Steplogpred, "prec")
plot(SteplogPerf, colorize = FALSE)
as.numeric(performance(Steplogpred, "auc")@y.values)
plot(CVBoostPerf, colorize = FALSE)
plot(logisticPerf, colorize = FALSE)
plot(SteplogPerf, colorize = FALSE)
tablePrec <- function(label, pred) {
t = table(label, pred)
return(t[2,2]/(t[1,2] + t[2,2]))
}
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.5)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.5)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.5)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.7)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.6)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.65)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.62)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.61)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.63)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.625)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.71)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.75)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.64)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.65)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.66)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.67)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.68)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.69)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.7)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.9)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.8)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.605)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.606)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.607)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.608)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.609)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.61)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.615)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.62)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.625)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.63)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.625)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.72)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.73)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.74)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.75)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.76)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.73)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.725)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.735)
# Stepwise Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictStepLog > 0.625)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.5)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.6)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.7)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.55)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.56)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.6)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.65)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.45)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.35)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.25)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.35)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.45)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.5)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.40)
plot(CVBoostPerf, colorize = FALSE)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost > 0.40)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.40)
table(Combined_TM.test)
table(Combined_TM.test$BinarySc)
?vif
??vif
1104 / (1104+1137)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.735)
# Logistic Regression
tablePrec(Combined_TM.test$BinarySc, PredictLog > 0.735)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.8)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.7)
# CV Boosting
tablePrec(Combined_TM.test$BinarySc, PredictCVBoost < 0.6)
# For the Cross Validated Boosting MOdel
CVboostpred <- prediction(PredictCVBoost, Combined_TM.test$BinarySc)
CVBoostPerf <- performance(CVboostpred, "prec")
plot(CVBoostPerf, colorize = FALSE)
str(PredictCVBoost)
1 - PredictCVBoost
head(1 - PredictCVBoost)
str(PredictCVBoost)
# For the Cross Validated Boosting MOdel
CVboostpred <- prediction(1 - PredictCVBoost, Combined_TM.test$BinarySc)
CVBoostPerf <- performance(CVboostpred, "prec")
plot(CVBoostPerf, colorize = FALSE)
length(mod_StepLog$coefficients)  # 20
length(mod_StepLog$coefficients)  # 20 variables selected in the final model
save.image("C:/Users/Aditya Peshin/Desktop/Studies/UC Berkeley/Fall 2019/242 - Applications in Data Analysis/Assignments/hw 4/hw4data.RData")
save.image("C:/Users/Aditya Peshin/Desktop/Studies/UC Berkeley/Fall 2019/242 - Applications in Data Analysis/Assignments/hw 4/hw4data.RData")
